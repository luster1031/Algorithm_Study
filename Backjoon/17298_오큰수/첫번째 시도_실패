<<<<<<< HEAD
#include <stdio.h>
#include <stdbool.h>

int main() {
	int input[1000001];
	int big_input[1000001];
	int testcase;
	int top = -1;
	int big_point = -1;
	int number;
	int big_number = 0;
	bool check = 0;

	scanf("%d", &testcase);
	for(int i = 0; i<testcase; i++){
		scanf("%d", &number);
		input[++top] = number;
		if (i > 0) {
			if (input[i] >= input[i - 1]) {
				big_input[++big_point] = input[i];
			}
		}
	}
	
	for (int i = 0, point = 0; i < testcase; i++) {
		if (input[i] < big_input[point] && i != testcase - 1) {
			printf("%d ", big_input[point]);
		}
		else if (input[i] >= big_input[point] && big_point >= point) {
			check = false;
			for (int p = point; p <= big_point; p++) {
				if (input[i] < big_input[p]) {
					check = true;
					printf("%d ", big_input[p]);
					break;
				}
			}
			if (!check)
				printf("-1 ");
			if (input[i] == big_input[point])
				point++;
		}
		else
			printf("-1 ");
		
	}


=======
#include<iostream>
#include<map>
using namespace std;

int main() {
	map<int, int> input;
	int output[5] = { 0 };
	int testcase,num;
	bool check;
	int max_num = 0;

	int my_row, my_value;
	cin >> testcase;

	for(int row = 0; row<testcase; row++) {
		cin >> num;
		input.insert(pair<int, int>(num, row));
		if (max_num < num)max_num = num;
	}
	for (map<int,int>::reverse_iterator i = input.rbegin(); i != input.rend(); i++) {
		if (i->second == 0)output[i->second] = -1;
		my_value = i->first;
		my_row = i->second;
		check = false;

		for (map<int, int>::reverse_iterator point = i; point != input.rend(); point--) {
			if (point->first > my_value && point->second > my_row) {
				output[my_row] = point->first;
				check = true;
				break;
			}
			if (point->first == max_num)break;
		}

		if (!check)output[my_row] = -1;
	}
	
	for (int i = 0; i < input.size(); i++) {
		cout << output[i] << " ";
	}
>>>>>>> copy2/main
	return 0;
}
