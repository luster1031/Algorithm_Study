#include<iostream>

using namespace std;
bool check[1002];
int output[1002];
int input[1002][1002];
int N, M, V;
int num_count = 1;

int DFS(int count, int row) {
	if (count == N)
		return 0;
	for (int col = 1; col <= N; col++) {
		if (input[row][col] && !check[col]) {
			cout << col << " ";
			check[col] = true;
			DFS(count+1, col);
		}
	}
	return 0;
}

	
int BFS(int count, int row,int point) {
	if (count == N)
		return 0;
	for (int col = 1; col <= N; col++) {
		if (input[row][col] && check[col]) {
			output[num_count++] = col;
			check[col] = false;
			cout << col << " ";
		}
	}
	if(output[point]!= 0)
		BFS(count + 1, output[point],point+1);

	
	return 0;
}

int main() {
	cin >> N >> M >> V;
	for (int i = 0,a,b; i < M; i++) {
		cin >> a >> b;
		input[a][b] = 1;
		input[b][a] = 1;
	}
	check[V] = true;
	cout << V << " ";
	DFS(1,V);

	check[V] = false;
	output[0] = V;
	cout << "\n" << V << " ";
	BFS(1,V,1);
	return 0;
}
